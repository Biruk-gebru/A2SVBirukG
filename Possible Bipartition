
class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        graph = defaultdict(list)
        for node in dislikes:
            graph[node[0]].append(node[1])
            graph[node[1]].append(node[0]) 
        
        color = [-1] * (n + 1)  
        
        def dfs(node, c):
            color[node] = c 
            for neighbor in graph[node]:
                if color[neighbor] == -1: 
                    if not dfs(neighbor, 1 - c):  
                        return False
                elif color[neighbor] == c:  
                    return False
            return True
        
        for i in range(1, n + 1): 
            if color[i] == -1:  
                if not dfs(i, 0):  
                    return False
        
        return True
